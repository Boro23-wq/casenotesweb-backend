// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model CaseManager {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  modifiedAt DateTime      @updatedAt
  firstName  String
  lastName   String
  phone      String
  email      String        @unique
  profileUrl String?
  cases      PatientCase[]
}

model Patient {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  modifiedAt DateTime      @updatedAt
  email      String        @unique
  firstName  String
  lastName   String
  phone      String
  cases      PatientCase[]
}

model Doctor {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  modifiedAt DateTime      @updatedAt
  email      String        @unique
  firstName  String
  lastName   String
  phone      String
  profession String?
  cases      PatientCase[]
}

model PatientCase {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  modifiedAt       DateTime     @updatedAt
  status           String
  subject          String
  caseManager      CaseManager? @relation(fields: [caseManagerEmail], references: [email])
  caseManagerEmail String?
  patient          Patient?     @relation(fields: [patientEmail], references: [email])
  patientEmail     String?
  doctor           Doctor?      @relation(fields: [doctorEmail], references: [email])
  doctorEmail      String?
  category         Category?    @relation(fields: [categoryTitle], references: [title])
  categoryTitle    String?
  severity         Severity?    @relation(fields: [severityLevel], references: [level])
  severityLevel    String?
  notes            Note[]
  solutions        Solution[]
  milestones       Milestone[]
  activities       Activity[]
}

model Note {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  modifiedAt DateTime    @updatedAt
  comment    String      @db.Text
  case       PatientCase @relation(fields: [caseId], references: [id])
  caseId     Int

  @@unique(fields: [id, caseId], name: "uniqueNote")
}

model Solution {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  modifiedAt    DateTime     @updatedAt
  subject       String
  investigation String       @db.Text
  resolution    String       @db.Text
  case          PatientCase? @relation(fields: [caseId], references: [id])
  caseId        Int

  @@unique(fields: [id, caseId], name: "uniqueSolution")
}

model Milestone {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  modifiedAt  DateTime    @updatedAt
  description String      @db.Text
  case        PatientCase @relation(fields: [caseId], references: [id])
  caseId      Int

  @@unique(fields: [id, caseId], name: "uniqueMilestone")
}

model Activity {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  modifiedAt  DateTime    @updatedAt
  description String      @db.Text
  case        PatientCase @relation(fields: [caseId], references: [id])
  caseId      Int
}

model Category {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  title       String        @unique
  description String        @db.Text
  cases       PatientCase[]
}

model Severity {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  level     String        @unique
  cases     PatientCase[]
}
